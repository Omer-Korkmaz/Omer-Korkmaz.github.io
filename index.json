[{"categories":["r"],"contents":"\nR has various ways to visualize data. In my opinion, ggplot2 is the most elegant, practical and somewhat easy to learn way to do so. It has a very common-sensical logic for creating graphs. It implements the grammar of graphics1.\nFollowing graphs about Covid19 are built with #ggplot2, using data provided by John Hopkins University2.\nData wrangling is done mostly using tidyverse3 package.\n1. Loading Data and Checking Contents\rLoading tidyverse, magrittr (For pipes) and lubridate (For date ops.):\nlibrary(\u0026quot;tidyverse\u0026quot;)\rlibrary(\u0026quot;magrittr\u0026quot;)\rlibrary(\u0026quot;lubridate\u0026quot;)\rDownloading confirmed cases data from JHU repo and loading into R:\ntime_series_raw_confirmed \u0026lt;- read.csv(\u0026quot;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv\u0026quot;)\rChecking out the dimensions:\ndim(time_series_raw_confirmed)\r## [1] 266 108\rChecking out the first few rows and columns:\nas_tibble(time_series_raw_confirmed)\r## # A tibble: 266 x 108\r## Province.State Country.Region Lat Long X1.22.20 X1.23.20 X1.24.20\r## \u0026lt;fct\u0026gt; \u0026lt;fct\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt;\r## 1 \u0026quot;\u0026quot; Afghanistan 33 65 0 0 0\r## 2 \u0026quot;\u0026quot; Albania 41.2 20.2 0 0 0\r## 3 \u0026quot;\u0026quot; Algeria 28.0 1.66 0 0 0\r## 4 \u0026quot;\u0026quot; Andorra 42.5 1.52 0 0 0\r## 5 \u0026quot;\u0026quot; Angola -11.2 17.9 0 0 0\r## 6 \u0026quot;\u0026quot; Antigua and B~ 17.1 -61.8 0 0 0\r## 7 \u0026quot;\u0026quot; Argentina -38.4 -63.6 0 0 0\r## 8 \u0026quot;\u0026quot; Armenia 40.1 45.0 0 0 0\r## 9 \u0026quot;Australian C~ Australia -35.5 149. 0 0 0\r## 10 \u0026quot;New South Wa~ Australia -33.9 151. 0 0 0\r## # ... with 256 more rows, and 101 more variables: X1.25.20 \u0026lt;int\u0026gt;,\r## # X1.26.20 \u0026lt;int\u0026gt;, X1.27.20 \u0026lt;int\u0026gt;, X1.28.20 \u0026lt;int\u0026gt;, X1.29.20 \u0026lt;int\u0026gt;,\r## # X1.30.20 \u0026lt;int\u0026gt;, X1.31.20 \u0026lt;int\u0026gt;, X2.1.20 \u0026lt;int\u0026gt;, X2.2.20 \u0026lt;int\u0026gt;,\r## # X2.3.20 \u0026lt;int\u0026gt;, X2.4.20 \u0026lt;int\u0026gt;, X2.5.20 \u0026lt;int\u0026gt;, X2.6.20 \u0026lt;int\u0026gt;, X2.7.20 \u0026lt;int\u0026gt;,\r## # X2.8.20 \u0026lt;int\u0026gt;, X2.9.20 \u0026lt;int\u0026gt;, X2.10.20 \u0026lt;int\u0026gt;, X2.11.20 \u0026lt;int\u0026gt;,\r## # X2.12.20 \u0026lt;int\u0026gt;, X2.13.20 \u0026lt;int\u0026gt;, X2.14.20 \u0026lt;int\u0026gt;, X2.15.20 \u0026lt;int\u0026gt;,\r## # X2.16.20 \u0026lt;int\u0026gt;, X2.17.20 \u0026lt;int\u0026gt;, X2.18.20 \u0026lt;int\u0026gt;, X2.19.20 \u0026lt;int\u0026gt;,\r## # X2.20.20 \u0026lt;int\u0026gt;, X2.21.20 \u0026lt;int\u0026gt;, X2.22.20 \u0026lt;int\u0026gt;, X2.23.20 \u0026lt;int\u0026gt;,\r## # X2.24.20 \u0026lt;int\u0026gt;, X2.25.20 \u0026lt;int\u0026gt;, X2.26.20 \u0026lt;int\u0026gt;, X2.27.20 \u0026lt;int\u0026gt;,\r## # X2.28.20 \u0026lt;int\u0026gt;, X2.29.20 \u0026lt;int\u0026gt;, X3.1.20 \u0026lt;int\u0026gt;, X3.2.20 \u0026lt;int\u0026gt;,\r## # X3.3.20 \u0026lt;int\u0026gt;, X3.4.20 \u0026lt;int\u0026gt;, X3.5.20 \u0026lt;int\u0026gt;, X3.6.20 \u0026lt;int\u0026gt;, X3.7.20 \u0026lt;int\u0026gt;,\r## # X3.8.20 \u0026lt;int\u0026gt;, X3.9.20 \u0026lt;int\u0026gt;, X3.10.20 \u0026lt;int\u0026gt;, X3.11.20 \u0026lt;int\u0026gt;,\r## # X3.12.20 \u0026lt;int\u0026gt;, X3.13.20 \u0026lt;int\u0026gt;, X3.14.20 \u0026lt;int\u0026gt;, X3.15.20 \u0026lt;int\u0026gt;,\r## # X3.16.20 \u0026lt;int\u0026gt;, X3.17.20 \u0026lt;int\u0026gt;, X3.18.20 \u0026lt;int\u0026gt;, X3.19.20 \u0026lt;int\u0026gt;,\r## # X3.20.20 \u0026lt;int\u0026gt;, X3.21.20 \u0026lt;int\u0026gt;, X3.22.20 \u0026lt;int\u0026gt;, X3.23.20 \u0026lt;int\u0026gt;,\r## # X3.24.20 \u0026lt;int\u0026gt;, X3.25.20 \u0026lt;int\u0026gt;, X3.26.20 \u0026lt;int\u0026gt;, X3.27.20 \u0026lt;int\u0026gt;,\r## # X3.28.20 \u0026lt;int\u0026gt;, X3.29.20 \u0026lt;int\u0026gt;, X3.30.20 \u0026lt;int\u0026gt;, X3.31.20 \u0026lt;int\u0026gt;,\r## # X4.1.20 \u0026lt;int\u0026gt;, X4.2.20 \u0026lt;int\u0026gt;, X4.3.20 \u0026lt;int\u0026gt;, X4.4.20 \u0026lt;int\u0026gt;, X4.5.20 \u0026lt;int\u0026gt;,\r## # X4.6.20 \u0026lt;int\u0026gt;, X4.7.20 \u0026lt;int\u0026gt;, X4.8.20 \u0026lt;int\u0026gt;, X4.9.20 \u0026lt;int\u0026gt;, X4.10.20 \u0026lt;int\u0026gt;,\r## # X4.11.20 \u0026lt;int\u0026gt;, X4.12.20 \u0026lt;int\u0026gt;, X4.13.20 \u0026lt;int\u0026gt;, X4.14.20 \u0026lt;int\u0026gt;,\r## # X4.15.20 \u0026lt;int\u0026gt;, X4.16.20 \u0026lt;int\u0026gt;, X4.17.20 \u0026lt;int\u0026gt;, X4.18.20 \u0026lt;int\u0026gt;,\r## # X4.19.20 \u0026lt;int\u0026gt;, X4.20.20 \u0026lt;int\u0026gt;, X4.21.20 \u0026lt;int\u0026gt;, X4.22.20 \u0026lt;int\u0026gt;,\r## # X4.23.20 \u0026lt;int\u0026gt;, X4.24.20 \u0026lt;int\u0026gt;, X4.25.20 \u0026lt;int\u0026gt;, X4.26.20 \u0026lt;int\u0026gt;,\r## # X4.27.20 \u0026lt;int\u0026gt;, X4.28.20 \u0026lt;int\u0026gt;, X4.29.20 \u0026lt;int\u0026gt;, X4.30.20 \u0026lt;int\u0026gt;,\r## # X5.1.20 \u0026lt;int\u0026gt;, X5.2.20 \u0026lt;int\u0026gt;, X5.3.20 \u0026lt;int\u0026gt;, ...\rDataframe has 266 rows (One row for each country/state) and 106 columns (One column for each day, starting on January 22).\n\r2. Cleaning Data\rWriting a function4 to pivot the data into longer format and summarize by country (I might work on same data in the future or on deaths and recoveries, so, better to write a function):\ntidydatafunction \u0026lt;- function(data) {\rdata %\u0026lt;\u0026gt;% select(everything(), -\u0026#39;Province.State\u0026#39;, -\u0026#39;Lat\u0026#39;, -\u0026#39;Long\u0026#39;) %\u0026gt;% rename(country = Country.Region) # Removing unnecessary columns and renaming one\rdata %\u0026lt;\u0026gt;% pivot_longer(-country, names_to = \u0026quot;date\u0026quot;, values_to = \u0026quot;count\u0026quot;) # Pivoting data into longer format\rdata %\u0026lt;\u0026gt;% mutate(date = date %\u0026gt;% substr(2,8)%\u0026gt;% mdy()) # Removing the \u0026quot;x\u0026quot;s and converting to dates\rdata %\u0026lt;\u0026gt;% group_by(country, date) %\u0026gt;% summarise(accumulated_cases = sum(count, na.rm = TRUE)) %\u0026gt;% as.data.frame() # Group by country and summarise on case data\rreturn(data)\r}\rCleaning previously loaded data into new tidy dataset:\ntime_series_tidy_confirmed \u0026lt;- time_series_raw_confirmed %\u0026gt;% tidydatafunction()\rChecking out new, tidy dataset:\nas_tibble(time_series_tidy_confirmed) %\u0026gt;%\rarrange(desc(accumulated_cases)) # Sorting desc. to see top numbers\r## # A tibble: 19,448 x 3\r## country date accumulated_cases\r## \u0026lt;fct\u0026gt; \u0026lt;date\u0026gt; \u0026lt;int\u0026gt;\r## 1 US 2020-05-04 1180375\r## 2 US 2020-05-03 1158040\r## 3 US 2020-05-02 1132539\r## 4 US 2020-05-01 1103461\r## 5 US 2020-04-30 1069424\r## 6 US 2020-04-29 1039909\r## 7 US 2020-04-28 1012582\r## 8 US 2020-04-27 988197\r## 9 US 2020-04-26 965785\r## 10 US 2020-04-25 938154\r## # ... with 19,438 more rows\rAdding daily cases as calculated field from accumulated cases and saving as a new data frame:\ntime_series_tidy_confirmed_with_daily \u0026lt;- time_series_tidy_confirmed %\u0026gt;%\rgroup_by(country) %\u0026gt;% # Group by country\rarrange(country, date) %\u0026gt;% # Sort asc. by country and then date\rmutate(daily_cases = c(0,diff(accumulated_cases))) # Calculate daily cases\rtime_series_tidy_confirmed_with_daily %\u0026gt;%\rarrange(desc(accumulated_cases)) # Sorting desc. to see top numbers\r## # A tibble: 19,448 x 4\r## # Groups: country [187]\r## country date accumulated_cases daily_cases\r## \u0026lt;fct\u0026gt; \u0026lt;date\u0026gt; \u0026lt;int\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 US 2020-05-04 1180375 22335\r## 2 US 2020-05-03 1158040 25501\r## 3 US 2020-05-02 1132539 29078\r## 4 US 2020-05-01 1103461 34037\r## 5 US 2020-04-30 1069424 29515\r## 6 US 2020-04-29 1039909 27327\r## 7 US 2020-04-28 1012582 24385\r## 8 US 2020-04-27 988197 22412\r## 9 US 2020-04-26 965785 27631\r## 10 US 2020-04-25 938154 32796\r## # ... with 19,438 more rows\rFiltering Turkey, calculating daily cases from accumulated cases and saving as a new data frame:\nturkey_time_series_tidy_confirmed_with_daily \u0026lt;- time_series_tidy_confirmed %\u0026gt;%\rfilter(country == \u0026quot;Turkey\u0026quot;) %\u0026gt;% # Filtering Turkey\rarrange(date) %\u0026gt;% # Sort asc. by date\rmutate(daily_cases = c(0,diff(accumulated_cases))) # Calculate daily cases\rhead(turkey_time_series_tidy_confirmed_with_daily %\u0026gt;%\rarrange(desc(accumulated_cases))) # Sorting desc. to see top numbers\r## country date accumulated_cases daily_cases\r## 1 Turkey 2020-05-04 127659 1614\r## 2 Turkey 2020-05-03 126045 1670\r## 3 Turkey 2020-05-02 124375 1983\r## 4 Turkey 2020-05-01 122392 2188\r## 5 Turkey 2020-04-30 120204 2615\r## 6 Turkey 2020-04-29 117589 2936\rListing top 9 countries in terms of total cases (Will come in handy later)\ntop_nine_countries \u0026lt;- time_series_tidy_confirmed_with_daily %\u0026gt;%\rfilter(date == max(date)) %\u0026gt;% # For the most recent day in data\rgroup_by(country) %\u0026gt;% # Group by country\rsummarise(total_case = sum(accumulated_cases, na.rm = TRUE)) %\u0026gt;% # Summarise on accumulated cases\rtop_n(9, total_case) %\u0026gt;% # Select top 9 countries by total cases\rarrange(desc(total_case)) %\u0026gt;% # Sort desc. to see in proper order\rselect(country) # Select only country names\rtop_nine_countries\r## # A tibble: 9 x 1\r## country ## \u0026lt;fct\u0026gt; ## 1 US ## 2 Spain ## 3 Italy ## 4 United Kingdom\r## 5 France ## 6 Germany ## 7 Russia ## 8 Turkey ## 9 Brazil\r#3. Plotting Some Graphs\nLet’s see how Turkey is doing, in terms of new cases.\nPlotting daily case trend for Turkey, black line and dots respresent actual case numbers and blue line is regression line:\nggplot(data = turkey_time_series_tidy_confirmed_with_daily, mapping = aes(x = date, y = daily_cases)) + # Passed on data, mapping and variables to plot, wrote explicitly on purpose\rgeom_line() + # Added line\rgeom_point() + # Added points\rgeom_smooth(se = FALSE) + # Added regression line, locally fitted with loess method labs(y = \u0026quot;Daily Cases\u0026quot;, x = \u0026quot;Date\u0026quot;, title = \u0026quot;Daily Covid19 Cases in Turkey\u0026quot;) # Axis labels and main title added\rIt seems that Turkey has reached the peak and now is on a downwards trend.\nLet’s see how top 9 countries (In terms of accumulated cases) are doing.\nPlotting daily case trend for top 9 countries, black line and dots respresent actual case numbers and blue line is regression line:\nggplot(data = filter(time_series_tidy_confirmed_with_daily, country == as_vector(top_nine_countries)), mapping = aes(x = date, y = daily_cases)) + # Passed on data, mapping and variables to plot, wrote explicitly on purpose\rgeom_line() + # Added line\rgeom_point() + # Added points\rgeom_smooth(se = FALSE) + # Added regression line, locally fitted with loess method labs(y = \u0026quot;Daily Cases\u0026quot;, x = \u0026quot;Date\u0026quot;, title = \u0026quot;Daily Covid19 Cases in Top 9 Countries\u0026quot;) + # Axis labels and main title added\rfacet_wrap(country~., nrow = 3, scales = \u0026quot;free\u0026quot;) \rAnd situation about accumulated cases is as following:\nPlotting accumulated case trend top 9 countries, black line and dots respresent actual case numbers and blue line is regression line:\noptions(scipen = 999999) # To see numbers as is, not in scientific format ggplot(data = filter(time_series_tidy_confirmed_with_daily, country == as_vector(top_nine_countries)), mapping = aes(x = date, y = accumulated_cases)) + # Passed on data, mapping and variables to plot, wrote explicitly on purpose\rgeom_line() + # Added line\rgeom_point() + # Added points\rgeom_smooth(se = FALSE) + # Added regression line, locally fitted with loess method labs(y = \u0026quot;Accumulated Cases\u0026quot;, x = \u0026quot;Date\u0026quot;, title = \u0026quot;Accumulated Covid19 Cases in Top 9 Countries\u0026quot;) + # Axis labels and main title added\rfacet_grid(country~., scales = \u0026quot;free_y\u0026quot;)\r\r\rIf you want to learn more about the theory behind the ggplot2 and layered grammar of graphics, I’d recommend reading “The Layered Grammar of Graphics”, http://vita.had.co.nz/papers/layered-grammar.pdf↩\n\rhttps://github.com/CSSEGISandData/COVID-19↩\n\rTidyverse is a set of R packages for data science. It includes ggplot2 as well as other packages to use in everyday data analyses, such as dplyr, tidyr, tibble and many others. Url: https://www.tidyverse.org/↩\n\rThere is a more complete and comprehensive paper written by Zhao Yancheng, inspired by / used some of the code in the paper wh’le wr’t’ng the function. Yanchang Zhao, COVID-19 Data Analysis with R – Worldwide. RDataMining.com, 2020. URL: http://www.rdatamining.com/docs/Coronavirus-data-analysis-world.pdf↩\n\r\r\r","permalink":"https://auditanddata.com/2020/05/covid19-ggplot2/","tags":["covid19","datascience","ggplot2","markdown","r","r markdown","r studio","tidyverse"],"title":"Simple Visualizations About Covid19 Cases Using ggplot2"},{"categories":["tranquilpeak","features"],"contents":"This is a chinese test post to show you how chinese is displayed.\n善我王上魚、產生資西員合兒臉趣論。畫衣生這著爸毛親可時，安程幾？合學作。觀經而作建。都非子作這！法如言子你關！手師也。\n以也座論頭室業放。要車時地變此親不老高小是統習直麼調未，行年香一？\n就竟在，是我童示讓利分和異種百路關母信過明驗有個歷洋中前合著區亮風值新底車有正結，進快保的行戰從：弟除文辦條國備當來際年每小腳識世可的的外的廣下歌洲保輪市果底天影；全氣具些回童但倒影發狀在示，數上學大法很，如要我……月品大供這起服滿老？應學傳者國：山式排只不之然清同關；細車是！停屋常間又，資畫領生，相們制在？公別的人寫教資夠。資再我我！只臉夫藝量不路政吃息緊回力之；兒足灣電空時局我怎初安。意今一子區首者微陸現際安除發連由子由而走學體區園我車當會，經時取頭，嚴了新科同？很夫營動通打，出和導一樂，查旅他。坐是收外子發物北看蘭戰坐車身做可來。道就學務。\n國新故。\n 工步他始能詩的，裝進分星海演意學值例道……於財型目古香亮自和這乎？化經溫詩。只賽嚴大一主價世哥受的沒有中年即病行金拉麼河。主小路了種就小為廣不？\n From 亂數假文產生器 - Chinese Lorem Ipsum\n","permalink":"https://auditanddata.com/2013/10/chinese-test/","tags":["chinese"],"title":"中文測試"},{"categories":["tranquilpeak","features"],"contents":"This is a Japanese test post to show you how japanese is displayed.\n私は昨日ついにその助力家というのの上よりするたなけれ。 最も今をお話団はちょうどこの前後なかろでくらいに困りがいるたをは帰着考えたなかって、そうにもするでうたらない。 がたを知っないはずも同時に九月をいよいよたありた。\nもっと槙さんにぼんやり金少し説明にえた自分大した人私か影響にというお関係たうませないが、この次第も私か兄具合に使うて、槙さんののに当人のあなたにさぞご意味と行くて私個人が小尊敬を聴いように同時に同反抗に集っだうて、いよいよまず相当へあっうからいだ事をしでなけれ。\n それでそれでもご時日をしはずはたったいやと突き抜けるますて、その元がは行ったてという獄を尽すていけですた。\n この中道具の日その学校はあなたごろがすまなりかとネルソンさんの考えるですん、辺の事実ないというご盲従ありたですと、爺さんのためが薬缶が結果までの箸の当時してならて、多少の十月にためからそういう上からとにかくしましないと触れべきものたで、ないうですと多少お人達したのでたた。\nFrom すぐ使えるダミーテキスト - 日本語 Lorem ipsum\n","permalink":"https://auditanddata.com/2013/01/japanese-test/","tags":["japanese"],"title":"日本語テスト"}]